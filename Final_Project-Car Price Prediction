import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Load the data into your code
data = pd.read_csv('cars_price.csv')

# Display the first few rows of the dataset
print(data.head())

# Check the number of rows and columns
num_rows = data.shape[0]
num_cols = data.shape[1]
print(f"Number of rows: {num_rows}")
print(f"Number of columns: {num_cols}")

# Check the data types of columns
data_types = data.dtypes
print(data_types)

# Calculate statistics of the dataset
statistics = data.describe()
print(statistics)

# Count the number of missing values in each column
missing_values = data.isnull().sum()
print(missing_values)

# Replace missing values with the mean of the column
data.fillna(data.mean(), inplace=True)

# Split the data into train and test sets
train_data, test_data = train_test_split(data, test_size=0.2, random_state=42)

# Separate the features and target variable
X_train = train_data.drop('price', axis=1)
y_train = train_data['price']
X_test = test_data.drop('price', axis=1)
y_test = test_data['price']

# Apply preprocessing techniques (Standardization)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Apply different machine learning techniques
linear_reg = LinearRegression()
linear_reg.fit(X_train_scaled, y_train)

rf_reg = RandomForestRegressor()
rf_reg.fit(X_train_scaled, y_train)

# Build the final model (Random Forest)
final_model = RandomForestRegressor()
final_model.fit(X_train_scaled, y_train)

# Make predictions on the test data using the final model
y_pred = final_model.predict(X_test_scaled)

# Report metrics on the test data
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("MSE:", mse)
print("MAE:", mae)
print("R2-score:", r2)

# Report the importance of different features
feature_importance = final_model.feature_importances_
print("Feature Importance:")
for feature_name, importance in zip(X_train.columns, feature_importance):
    print(feature_name, ":", importance)

